<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\pandent.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\pandent.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue Feb 02 09:49:17 2016
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ACMP0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[20]">ACMP1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[22]">ADC_IRQHandler</a> from interrupt.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[3c]">Custerm_Agps</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[2f]">Custerm_Apn</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[46]">Custerm_Bat</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[2e]">Custerm_BattDischargeLev</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[2c]">Custerm_BattEmptyLev</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[2b]">Custerm_BattLowLev</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[2d]">Custerm_BattReplaceLev</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[43]">Custerm_Call</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[40]">Custerm_Csq</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[3b]">Custerm_Debug</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[36]">Custerm_Default</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[37]">Custerm_Delay</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[44]">Custerm_End</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[39]">Custerm_Fibro</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[42]">Custerm_GpsInfo</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[3a]">Custerm_Imei</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[31]">Custerm_Ip1</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[32]">Custerm_Ip2</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[35]">Custerm_LocalPort</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[41]">Custerm_Log</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[45]">Custerm_LogClean</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[33]">Custerm_Phone1</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[34]">Custerm_Phone2</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[38]">Custerm_Sia</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[3f]">Custerm_SmsPw</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[3e]">Custerm_Url</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[30]">Custerm_UserPw</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[3d]">Custerm_Version</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[47]">Cutterm_Iccid</a> from custerm.o(.text) referenced from misc.o(.constdata)
 <LI><a href="#[1c]">Default_Handler</a> from startup_m051series.o(.text) referenced 9 times from startup_m051series.o(RESET)
 <LI><a href="#[e]">EINT0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[f]">EINT1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[10]">GPIOP0P1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[11]">GPIOP2P3P4_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1d]">I2C0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[12]">PWMA_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[13]">PWMB_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[21]">PWRWU_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[23]">RTC_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[48]">Reset_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1a]">SPI0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from interrupt.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_m051series.o(.text) referenced from startup_m051series.o(.text)
 <LI><a href="#[14]">TMR0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[15]">TMR1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[16]">TMR2_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[17]">TMR3_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[18]">UART0_IRQHandler</a> from interrupt.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[19]">UART1_IRQHandler</a> from interrupt.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[49]">__main</a> from __main.o(!!!main) referenced from startup_m051series.o(.text)
 <LI><a href="#[29]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2a]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[28]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[26]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[27]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[174]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[175]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[176]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[151]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4f]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[50]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[52]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[54]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[56]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[57]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[58]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[5a]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[5b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[5d]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[5e]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[5f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[61]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[63]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[65]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[66]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[67]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[69]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[6b]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[6c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[6e]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[70]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[72]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[7c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[177]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[178]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[74]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[179]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[76]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[17c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[77]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[17e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[180]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[181]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[182]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[183]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[184]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[185]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[186]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[187]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[188]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[189]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[81]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[18b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[18c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[18d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[18e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[18f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[190]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[4c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[191]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[79]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[192]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SecondHandle &rArr; StandbyTimerHandle &rArr; EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[193]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[172]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[80]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[194]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[82]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[84]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, system_m051series.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, system_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_m051series.o(.text))

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOP0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIOP2P3P4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_m051series.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[86]"></a>NvVersionCheck</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NvVersionCheck &rArr; debug
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInit
</UL>

<P><STRONG><a name="[89]"></a>ErasePage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ErasePage &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogClean
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVersionWrite
</UL>

<P><STRONG><a name="[8b]"></a>IsEmptySect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyLog
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyPage
</UL>

<P><STRONG><a name="[8c]"></a>IsEmptyPage</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsEmptyPage &rArr; IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptySect
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyLogPage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVersionWrite
</UL>

<P><STRONG><a name="[8d]"></a>NvVersionWrite</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NvVersionWrite &rArr; IsEmptyPage &rArr; IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyPage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInit
</UL>

<P><STRONG><a name="[8f]"></a>WritePage</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
</UL>

<P><STRONG><a name="[90]"></a>InitDefault</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitDefault &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Default
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamInit
</UL>

<P><STRONG><a name="[94]"></a>IsEmptyLog</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsEmptyLog &rArr; IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptySect
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneLog
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyLogIndex
</UL>

<P><STRONG><a name="[95]"></a>GetEmptyLogIndex</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetEmptyLogIndex &rArr; IsEmptyLog &rArr; IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyLog
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInit
</UL>

<P><STRONG><a name="[96]"></a>IsEmptyLogPage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsEmptyLogPage &rArr; IsEmptyPage &rArr; IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyPage
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogClean
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInit
</UL>

<P><STRONG><a name="[97]"></a>LogInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LogInit &rArr; IsEmptyLogPage &rArr; IsEmptyPage &rArr; IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyLogPage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmptyLogIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInit
</UL>

<P><STRONG><a name="[98]"></a>ReadPage</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromNv
</UL>

<P><STRONG><a name="[99]"></a>ReadFromNv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadFromNv &rArr; ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamInit
</UL>

<P><STRONG><a name="[9a]"></a>ParamInit</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ParamInit &rArr; InitDefault &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromNv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyPage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInit
</UL>

<P><STRONG><a name="[9b]"></a>LogClean</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LogClean &rArr; IsEmptyLogPage &rArr; IsEmptyPage &rArr; IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyLogPage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_LogClean
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInit
</UL>

<P><STRONG><a name="[9c]"></a>NvInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NvInit &rArr; ParamInit &rArr; InitDefault &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogClean
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVersionWrite
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVersionCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>WriteToNv</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Delay
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattDischargeLev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattReplaceLev
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattEmptyLev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattLowLev
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Switch
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>

<P><STRONG><a name="[9e]"></a>ReadStringLog</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadStringLog
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneLog
</UL>

<P><STRONG><a name="[9f]"></a>WriteStringLog</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteStringLog
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneLog
</UL>

<P><STRONG><a name="[a0]"></a>ReadOneLog</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadOneLog &rArr; ReadStringLog
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStringLog
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyLog
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLog
</UL>

<P><STRONG><a name="[a1]"></a>WriteOneLog</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteOneLog &rArr; WriteStringLog
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_16
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStringLog
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
</UL>

<P><STRONG><a name="[a3]"></a>WriteLog</STRONG> (Thumb, 162 bytes, Stack size 144 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneLog
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptyLog
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
</UL>

<P><STRONG><a name="[a8]"></a>ReadLog</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadLog &rArr; ReadOneLog &rArr; ReadStringLog
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneLog
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSendBySms
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Log
</UL>

<P><STRONG><a name="[a9]"></a>LogOnOff</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2Txt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddVoltageInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerDown
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCall
</UL>

<P><STRONG><a name="[2f]"></a>Custerm_Apn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_Apn &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>Custerm_Apn2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>

<P><STRONG><a name="[30]"></a>Custerm_UserPw</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_UserPw &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>Custerm_UserPw2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>

<P><STRONG><a name="[31]"></a>Custerm_Ip1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_Ip1 &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>Custerm_Ip2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_Ip2 &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>Custerm_Url</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_Url &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>Custerm_Phone1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_Phone1 &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>Custerm_Phone2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_Phone2 &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>Custerm_LocalPort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_LocalPort &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>Custerm_Sia</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_Sia &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>Custerm_SmsPw</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_SmsPw &rArr; Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>Custerm_Csq</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_Csq &rArr; signal_quality &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2Txt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>Custerm_Default</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Custerm_Default &rArr; InitDefault &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>Custerm_BattLowLev</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_BattLowLev &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToInt
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC2Txt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>Custerm_BattEmptyLev</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_BattEmptyLev &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToInt
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC2Txt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>Custerm_BattReplaceLev</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_BattReplaceLev &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToInt
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC2Txt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>Custerm_BattDischargeLev</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_BattDischargeLev &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToInt
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC2Txt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>Custerm_Delay</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_Delay &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToInt
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2Txt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>Custerm_Fibro</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Custerm_Fibro &rArr; PhoneNumberSet &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneNumberSet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomError
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>Custerm_Imei</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Custerm_Imei &rArr; GetModuleIMEI &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleIMEI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>Cutterm_Iccid</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Cutterm_Iccid &rArr; GetIccid &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIccid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>Custerm_Debug</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_Debug &rArr; Custerm_Switch &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>Custerm_Agps</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_Agps &rArr; Custerm_Switch &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>Custerm_Version</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Custerm_Version &rArr; SmsRsqAdd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>Custerm_Log</STRONG> (Thumb, 146 bytes, Stack size 136 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Custerm_Log &rArr; ReadLog &rArr; ReadOneLog &rArr; ReadStringLog
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>Custerm_GpsInfo</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Custerm_GpsInfo &rArr; SmsRsqAdd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>Custerm_Call</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Custerm_Call &rArr; EnterCall &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpParamInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSleep
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAudioInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>Custerm_End</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Custerm_End &rArr; SmsAck &rArr; WaitRsp &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAck
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>Custerm_LogClean</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Custerm_LogClean &rArr; LogClean &rArr; IsEmptyLogPage &rArr; IsEmptyPage &rArr; IsEmptySect
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogClean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>Custerm_Bat</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Custerm_Bat &rArr; SmsRsqAdd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurePower
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> misc.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>CustermHandle</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CustermHandle &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureBySms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
</UL>

<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; PressHelp &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressHelp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressBatter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>GetKeyHelp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
</UL>

<P><STRONG><a name="[10d]"></a>GetKeyBatt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
</UL>

<P><STRONG><a name="[7e]"></a>main</STRONG> (Thumb, 836 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = main &rArr; SecondHandle &rArr; StandbyTimerHandle &rArr; EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhatToDo
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLockPower
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockOpen
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterWait
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Redial
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownHandle
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDown
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulePowerOn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleOn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemVolumeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockPower
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedLight
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDark
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlink
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpsiInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandby
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerDown
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCallFail
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressHelp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressBatter
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSleep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurePower
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsgDebug
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCall
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d3]"></a>WatchdogInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>FeedWatchdog</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRsp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_CheckRegister
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContent
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterEndCall
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAnswer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Speech
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUntil
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>

<P><STRONG><a name="[b0]"></a>SendDebugString</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtProxy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_16
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Bat
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_LogClean
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_End
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Call
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_GpsInfo
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Log
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Version
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cutterm_Iccid
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Imei
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Fibro
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Delay
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattDischargeLev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattReplaceLev
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattEmptyLev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattLowLev
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Default
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Csq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Switch
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomError
</UL>

<P><STRONG><a name="[88]"></a>debug</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = debug
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContent
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHandle
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinStatusIndication
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUnder3G
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLockPower
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cutterm_Iccid
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Imei
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLog
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVersionCheck
</UL>

<P><STRONG><a name="[d8]"></a>SoftReset</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftReset &rArr; debug
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>

<P><STRONG><a name="[8a]"></a>delay_ms</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupCall
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupAllCall
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findUdp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressHelp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressBatter
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAck
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneNumberSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
</UL>

<P><STRONG><a name="[c0]"></a>delay_50ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_50ms
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_PowerOn
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSimPinStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHandle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtProxy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDown
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerDown
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleIMEI
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Call
</UL>

<P><STRONG><a name="[196]"></a>SendDebug</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>Hex2Txt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_16
</UL>

<P><STRONG><a name="[a2]"></a>debug_16</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_16
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Txt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneLog
</UL>

<P><STRONG><a name="[a4]"></a>debug_8</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_8
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Txt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureBySms
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContent
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHave
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSleep
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCall
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLog
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
</UL>

<P><STRONG><a name="[197]"></a>Hex2String</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>Str2Hexs</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Str2Hexs &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSet
</UL>

<P><STRONG><a name="[ad]"></a>Dec2Txt</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dec2Txt
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand2
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Delay
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Csq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
</UL>

<P><STRONG><a name="[b7]"></a>DEC2Txt</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DEC2Txt
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattDischargeLev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattReplaceLev
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattEmptyLev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattLowLev
</UL>

<P><STRONG><a name="[cc]"></a>ClkInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ClkInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>UartInit</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>AdcInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>ModulePowerOn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_PowerOn
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDown
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>LedTigger</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>ModuleOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>LockPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLockPower
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDown
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>PressBatter</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PressBatter &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhatToDo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLockPower
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ca]"></a>PressHelp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PressHelp &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhatToDo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLockPower
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c2]"></a>ModemSleep</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModemSleep &rArr; debug_8
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyTimerHandle
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerDown
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Call
</UL>

<P><STRONG><a name="[f5]"></a>AdcStart</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterCheck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurePower
</UL>

<P><STRONG><a name="[d4]"></a>WhatToDo</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WhatToDo &rArr; PressHelp &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressHelp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressBatter
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>LedBlink</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLockPower
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>LedDark</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLockPower
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDown
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>WaitLockPower</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WaitLockPower &rArr; PressHelp &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_PowerOn
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockPower
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDark
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlink
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressHelp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressBatter
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>MeasurePower</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MeasurePower
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcStart
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddVoltageInfo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Bat
</UL>

<P><STRONG><a name="[db]"></a>PlayVoice</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlayVoice &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrongPlay
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowValtageWarnning
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Speech
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinStatusIndication
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CsqPlay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryIndicate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>PinStatusIndication</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PinStatusIndication &rArr; PlayVoice &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUntil
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHandle
</UL>

<P><STRONG><a name="[fb]"></a>PinHandle</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PinHandle &rArr; LockPinCode &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockPinCode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgPinCode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSimLock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinStatusIndication
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
</UL>

<P><STRONG><a name="[e2]"></a>PlayMusic</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlayMusic &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAnswer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownHandle
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerDown
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCallFail
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCall
</UL>

<P><STRONG><a name="[de]"></a>EnterPowerDown</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSleep
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyTimerHandle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>GetString</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryModuleSate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUnder3G
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpsiInfo
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIccid
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTime
</UL>

<P><STRONG><a name="[10b]"></a>Str2Speech</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Str2Speech &rArr; PlayVoice &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
</UL>

<P><STRONG><a name="[c7]"></a>BatteryVoltage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BatteryVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddVoltageInfo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Bat
</UL>

<P><STRONG><a name="[10c]"></a>enter_test_mode</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = enter_test_mode &rArr; EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Speech
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsmSigal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CsqPlay
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockOpen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerDown
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyBatt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyHelp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAudioInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurePower
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
</UL>

<P><STRONG><a name="[dd]"></a>PowerOn</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = PowerOn &rArr; enter_test_mode &rArr; EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpPacketInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryIndicate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>LowValtageWarnning</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LowValtageWarnning &rArr; PlayVoice &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterCheck
</UL>

<P><STRONG><a name="[ed]"></a>BatterCheck</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BatterCheck &rArr; LowValtageWarnning &rArr; PlayVoice &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowValtageWarnning
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcStart
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>GetCpsiInfo</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetCpsiInfo &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>EnterCallFail</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EnterCallFail &rArr; HuangupCall &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupCall
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCall
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>QueryModuleSate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QueryModuleSate &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCall
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallActive
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
</UL>

<P><STRONG><a name="[11d]"></a>IsInCall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownHandle
</UL>

<P><STRONG><a name="[116]"></a>Txt2Dec</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Txt2Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSmsIndex
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNum
</UL>

<P><STRONG><a name="[115]"></a>SmsInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SmsInit &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Txt2Dec
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHave
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
</UL>

<P><STRONG><a name="[da]"></a>LedLight</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedLight
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>StrToInt</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Delay
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattDischargeLev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattReplaceLev
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattEmptyLev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattLowLev
</UL>

<P><STRONG><a name="[117]"></a>GpsDataHandle</STRONG> (Thumb, 742 bytes, Stack size 56 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GpsDataHandle &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedLight
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToInt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
</UL>

<P><STRONG><a name="[11a]"></a>SmsHave</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SmsHave &rArr; SmsInit &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNum
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyTimerHandle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
</UL>

<P><STRONG><a name="[ec]"></a>SecondHandle</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SecondHandle &rArr; StandbyTimerHandle &rArr; EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsStart_2
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountGet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCall
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryModuleSate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyTimerHandle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpsiInfo
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>EnterStandby</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EnterStandby &rArr; GpsStop &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsStop
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterEndCall
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAnswer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>EnterAnswer</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EnterAnswer &rArr; EnterStandby &rArr; GpsStop &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupCall
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallActive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
</UL>

<P><STRONG><a name="[c4]"></a>EnterCall</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = EnterCall &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Redial
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Call
</UL>

<P><STRONG><a name="[eb]"></a>KeyHandle</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = KeyHandle &rArr; enter_test_mode &rArr; EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResendGpsSig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVolume
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAnswer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryIndicate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressHelp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressBatter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyBatt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyHelp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpParamInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSleep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurePower
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCall
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>DisplaySignalLevel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>Redial</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Redial &rArr; EnterCall &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCall
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>Call</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Call &rArr; EnterCallFail &rArr; HuangupCall &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCallFail
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>PowerDown</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PowerDown &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulePowerOn
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockPower
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDark
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>EnterEndCall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = EnterEndCall &rArr; SIAEventPacketCreate &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownHandle
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
</UL>

<P><STRONG><a name="[126]"></a>findUdp</STRONG> (Thumb, 250 bytes, Stack size 96 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = findUdp &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
</UL>

<P><STRONG><a name="[ef]"></a>MsgHandle</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = MsgHandle &rArr; EnterEndCall &rArr; SIAEventPacketCreate &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockConnect
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetUartFlag
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupCall
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVolume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findUdp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterEndCall
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSmsIndex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtProxy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCall
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallActive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandby
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSleep
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustermHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>InitMsgDebug</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Switch
</UL>

<P><STRONG><a name="[e1]"></a>InitVariables</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitVariables &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetUartFlag
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>Switch2Apn2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockClose
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockOpen
</UL>

<P><STRONG><a name="[19a]"></a>Txt2Hex</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>GetSmsContent</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetSmsContent &rArr; SendAtCommand2 &rArr; Dec2Txt
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetUartFlag
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
</UL>

<P><STRONG><a name="[12e]"></a>GetSmsMainBody</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetSmsMainBody &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
</UL>

<P><STRONG><a name="[12f]"></a>SmsExist</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SmsExist &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
</UL>

<P><STRONG><a name="[130]"></a>SmsDel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand2
</UL>

<P><STRONG><a name="[c5]"></a>SmsAck</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SmsAck &rArr; WaitRsp &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRsp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSendBySms
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureBySms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_End
</UL>

<P><STRONG><a name="[132]"></a>SmsHeadVerify</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SmsHeadVerify &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureBySms
</UL>

<P><STRONG><a name="[133]"></a>ConfigureBySms</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ConfigureBySms &rArr; SmsAck &rArr; WaitRsp &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHeadVerify
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAck
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustermHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
</UL>

<P><STRONG><a name="[af]"></a>SmsRsqAdd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SmsRsqAdd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSendBySms
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Bat
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_LogClean
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_End
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Call
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_GpsInfo
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Log
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Version
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cutterm_Iccid
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Imei
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Fibro
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Delay
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattDischargeLev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattReplaceLev
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattEmptyLev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattLowLev
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Default
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Csq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Switch
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomError
</UL>

<P><STRONG><a name="[134]"></a>LogSendBySms</STRONG> (Thumb, 44 bytes, Stack size 136 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LogSendBySms &rArr; SmsAck &rArr; WaitRsp &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLog
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
</UL>

<P><STRONG><a name="[f1]"></a>SmsHandle</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SmsHandle &rArr; SmsHave &rArr; SmsInit &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSendBySms
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureBySms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsExist
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsMainBody
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContent
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHave
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>StrongPlay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
</UL>

<P><STRONG><a name="[a5]"></a>GetDateTime</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
</UL>

<P><STRONG><a name="[e3]"></a>RegisterWait</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegisterWait &rArr; signal_quality &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_CheckRegister
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>PowerDownHandle</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = PowerDownHandle &rArr; EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupAllCall
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterEndCall
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCall
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>ResetUartFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[141]"></a>SendData</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
</UL>

<P><STRONG><a name="[f8]"></a>SendAtCommand</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendAtCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockClose
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_CheckRegister
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockPinCode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupCall
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSimPinStatus
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgPinCode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVolume
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSimLock
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountGet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAnswer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtProxy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockOpen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemVolumeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAck
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleIMEI
</UL>

<P><STRONG><a name="[12d]"></a>SendAtCommand2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendAtCommand2 &rArr; Dec2Txt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2Txt
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsDel
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContent
</UL>

<P><STRONG><a name="[138]"></a>CheckTc35Respond</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckTc35Respond
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_CheckRegister
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockPinCode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSimPinStatus
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgPinCode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSimLock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>

<P><STRONG><a name="[109]"></a>SendAtCmdRsq</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendAtCmdRsq &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTc35Respond
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHave
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryModuleSate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUnder3G
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpsiInfo
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIccid
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTime
</UL>

<P><STRONG><a name="[131]"></a>WaitRsp</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WaitRsp &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAck
</UL>

<P><STRONG><a name="[f9]"></a>module_WaitResponse</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockClose
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_CheckRegister
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockPinCode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupCall
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSimPinStatus
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgPinCode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVolume
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSimLock
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountGet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsDel
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtProxy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockOpen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemVolumeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleIMEI
</UL>

<P><STRONG><a name="[bf]"></a>SendAtWaitRsq</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTc35Respond
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchVoiceChannel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockConnect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemNetworkInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuangupAllCall
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsStop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsStart_2
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockOpen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDown
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneNumberSet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAudioInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Call
</UL>

<P><STRONG><a name="[f4]"></a>module_PowerOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_PowerOn &rArr; delay_50ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulePowerOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLockPower
</UL>

<P><STRONG><a name="[100]"></a>module_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = module_Init &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
</UL>

<P><STRONG><a name="[136]"></a>Module_CheckRegister</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Module_CheckRegister &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTc35Respond
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterWait
</UL>

<P><STRONG><a name="[103]"></a>ModemNetworkInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ModemNetworkInit &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
</UL>

<P><STRONG><a name="[120]"></a>AdjustVolume</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AdjustVolume &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemVolumeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
</UL>

<P><STRONG><a name="[13a]"></a>SwitchVoiceChannel</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SwitchVoiceChannel &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemVolumeInit
</UL>

<P><STRONG><a name="[d9]"></a>ModemVolumeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ModemVolumeInit &rArr; SwitchVoiceChannel &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchVoiceChannel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>ModemAudioInit</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ModemAudioInit &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Call
</UL>

<P><STRONG><a name="[111]"></a>HuangupCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HuangupCall &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAnswer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCallFail
</UL>

<P><STRONG><a name="[137]"></a>HuangupAllCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HuangupAllCall &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownHandle
</UL>

<P><STRONG><a name="[101]"></a>GetSimPinStatus</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetSimPinStatus &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTc35Respond
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
</UL>

<P><STRONG><a name="[ab]"></a>signal_quality</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = signal_quality &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTc35Respond
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsmSigal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterWait
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Csq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
</UL>

<P><STRONG><a name="[104]"></a>GpsStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GpsStop &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoneInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandby
</UL>

<P><STRONG><a name="[11c]"></a>GpsStart_2</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GpsStart_2 &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
</UL>

<P><STRONG><a name="[e5]"></a>SockOpen</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SockOpen &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch2Apn2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>SockClose</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, module.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch2Apn2
</UL>

<P><STRONG><a name="[128]"></a>SockConnect</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SockConnect &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
</UL>

<P><STRONG><a name="[bb]"></a>GetModuleIMEI</STRONG> (Thumb, 778 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetModuleIMEI &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Imei
</UL>

<P><STRONG><a name="[bc]"></a>GetIccid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetIccid &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cutterm_Iccid
</UL>

<P><STRONG><a name="[fd]"></a>ChgPinCode</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ChgPinCode &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTc35Respond
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHandle
</UL>

<P><STRONG><a name="[fc]"></a>LockPinCode</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LockPinCode &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTc35Respond
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHandle
</UL>

<P><STRONG><a name="[fe]"></a>ActiveSimLock</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ActiveSimLock &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTc35Respond
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHandle
</UL>

<P><STRONG><a name="[d7]"></a>Communication</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Communication &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>AccountGet</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AccountGet &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSet
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
</UL>

<P><STRONG><a name="[b9]"></a>PhoneNumberSet</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = PhoneNumberSet &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Fibro
</UL>

<P><STRONG><a name="[147]"></a>checkPacketFormat</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
</UL>

<P><STRONG><a name="[13e]"></a>XorCalcurate</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XorCalcurate
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SiaAcountSet
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
</UL>

<P><STRONG><a name="[145]"></a>CrcCalcurate</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CrcCalcurate
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXInitPacketCreate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
</UL>

<P><STRONG><a name="[148]"></a>SetSendSigalFlag</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSendSigalFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
</UL>

<P><STRONG><a name="[144]"></a>CmdSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXInitPacketCreate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
</UL>

<P><STRONG><a name="[146]"></a>SeqInc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
</UL>

<P><STRONG><a name="[13b]"></a>AccSet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AccSet &rArr; AccountGet &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountGet
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hexs
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHeadInit
</UL>

<P><STRONG><a name="[13c]"></a>MacSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MacSet &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpDataInit
</UL>

<P><STRONG><a name="[143]"></a>SuperSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXInitPacketCreate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
</UL>

<P><STRONG><a name="[13d]"></a>SiaAcountSet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SiaAcountSet &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorCalcurate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
</UL>

<P><STRONG><a name="[ac]"></a>AddVoltageInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddVoltageInfo &rArr; MeasurePower
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurePower
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
</UL>

<P><STRONG><a name="[13f]"></a>UdpHeadInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UdpHeadInit &rArr; AccSet &rArr; AccountGet &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXInitPacketCreate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpPacketInit
</UL>

<P><STRONG><a name="[140]"></a>UdpDataInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UdpDataInit &rArr; MacSet &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXInitPacketCreate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpPacketInit
</UL>

<P><STRONG><a name="[10f]"></a>UdpPacketInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UdpPacketInit &rArr; UdpHeadInit &rArr; AccSet &rArr; AccountGet &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpDataInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHeadInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[124]"></a>UdpSend</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UdpSend &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2Txt
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterEndCall
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientInit
</UL>

<P><STRONG><a name="[142]"></a>TXInitPacketCreate</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TXInitPacketCreate &rArr; UdpHeadInit &rArr; AccSet &rArr; AccountGet &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpDataInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHeadInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSet
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCalcurate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientInit
</UL>

<P><STRONG><a name="[ea]"></a>ClientInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ClientInit &rArr; TXInitPacketCreate &rArr; UdpHeadInit &rArr; AccSet &rArr; AccountGet &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXInitPacketCreate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>SIAEventPacketCreate</STRONG> (Thumb, 968 bytes, Stack size 40 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SIAEventPacketCreate &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SiaAcountSet
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperSet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqInc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSet
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCalcurate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorCalcurate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_8
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2Txt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddVoltageInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterEndCall
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
</UL>

<P><STRONG><a name="[149]"></a>TypeNextUdp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
</UL>

<P><STRONG><a name="[f0]"></a>UdpHandle</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = UdpHandle &rArr; SIAEventPacketCreate &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeNextUdp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXInitPacketCreate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSendSigalFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPacketFormat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterStandby
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>udpParamInit</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Call
</UL>

<P><STRONG><a name="[121]"></a>ResendGpsSig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
</UL>

<P><STRONG><a name="[139]"></a>__c89vsnprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtWaitRsq
</UL>

<P><STRONG><a name="[118]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
</UL>

<P><STRONG><a name="[157]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[158]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[5c]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[14f]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b3]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSend
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureBySms
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHeadVerify
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsMainBody
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryModuleSate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtProxy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Fibro
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Delay
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattDischargeLev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattReplaceLev
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattEmptyLev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_BattLowLev
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>

<P><STRONG><a name="[f7]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRsp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountGet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAnswer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Speech
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNum
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUntil
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
</UL>

<P><STRONG><a name="[92]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSet
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSendBySms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpsiInfo
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
</UL>

<P><STRONG><a name="[a7]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIAEventPacketCreate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHeadVerify
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsMainBody
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findUdp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Speech
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hexs
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNum
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustermHandle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnOff
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
</UL>

<P><STRONG><a name="[c9]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHeadVerify
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsExist
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustermHandle
</UL>

<P><STRONG><a name="[a6]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpsiInfo
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLog
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SiaAcountSet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountGet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContent
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findUdp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHandle
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Fibro
</UL>

<P><STRONG><a name="[19b]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
</UL>

<P><STRONG><a name="[153]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[152]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXInitPacketCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpDataInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpHeadInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[155]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[b4]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDataHandle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHandle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurePower
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2Txt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC2Txt
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Delay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[19f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[156]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[14e]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[51]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[14a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[27]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[64]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[15c]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[60]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[68]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[15d]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[62]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[6a]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[53]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[14d]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[15b]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1a2]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_printf_fp_dec_real</STRONG> (Thumb, 618 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[165]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[6d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[6f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[167]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[71]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[73]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[15a]"></a>_wcrtomb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[7a]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[169]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[75]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[164]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[15f]"></a>_btod_etento</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[160]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[162]"></a>_btod_emul</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16e]"></a>_btod_emuld</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[161]"></a>_btod_ediv</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[170]"></a>_btod_edivd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[7f]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[83]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1a5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[1a7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, custerm.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHandle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_String
</UL>

<P><STRONG><a name="[163]"></a>__ARM_fpclassify</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[150]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[78]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[29]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>FMC_Read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneLog
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStringLog
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmptySect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVersionCheck
</UL>

<P><STRONG><a name="[ae]"></a>CustomError</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CustomError &rArr; SmsRsqAdd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Fibro
</UL>

<P><STRONG><a name="[b1]"></a>Custerm_String</STRONG> (Thumb, 730 bytes, Stack size 32 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custerm_String &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_SmsPw
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Sia
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_LocalPort
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Phone2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Phone1
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Url
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Ip2
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Ip1
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_UserPw2
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_UserPw
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Apn2
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Apn
</UL>

<P><STRONG><a name="[bd]"></a>Custerm_Switch</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, custerm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custerm_Switch &rArr; WriteToNv &rArr; WritePage
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsRsqAdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsgDebug
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Agps
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custerm_Debug
</UL>

<P><STRONG><a name="[8e]"></a>FMC_Write</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, custerm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneLog
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStringLog
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefault
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVersionWrite
</UL>

<P><STRONG><a name="[d1]"></a>SysTick_Config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>DelayUntil</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DelayUntil &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinStatusIndication
</UL>

<P><STRONG><a name="[ff]"></a>PhoneInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = PhoneInit &rArr; module_Init &rArr; SendAtWaitRsq &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetUartFlag
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemNetworkInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsStop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSimPinStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHandle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAudioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[105]"></a>BatteryIndicate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BatteryIndicate &rArr; PlayVoice &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandle
</UL>

<P><STRONG><a name="[106]"></a>CsqPlay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CsqPlay &rArr; PlayVoice &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayVoice
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
</UL>

<P><STRONG><a name="[108]"></a>IsUnder3G</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IsUnder3G &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCmdRsq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsmSigal
</UL>

<P><STRONG><a name="[10a]"></a>GetGsmSigal</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetGsmSigal &rArr; IsUnder3G &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUnder3G
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_quality
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_mode
</UL>

<P><STRONG><a name="[114]"></a>CallActive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAnswer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryModuleSate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
</UL>

<P><STRONG><a name="[112]"></a>EndCall</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EndCall &rArr; EnterCallFail &rArr; HuangupCall &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCallFail
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryModuleSate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
</UL>

<P><STRONG><a name="[119]"></a>GetNum</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetNum &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Txt2Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHave
</UL>

<P><STRONG><a name="[11b]"></a>StandbyTimerHandle</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = StandbyTimerHandle &rArr; EnterPowerDown &rArr; LogOnOff &rArr; WriteLog &rArr; GetDateTime &rArr; GetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsHave
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerDown
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondHandle
</UL>

<P><STRONG><a name="[125]"></a>AtProxy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AtProxy &rArr; module_WaitResponse &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_WaitResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAtCommand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ms
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugString
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
</UL>

<P><STRONG><a name="[127]"></a>saveSmsIndex</STRONG> (Thumb, 272 bytes, Stack size 20 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = saveSmsIndex &rArr; Txt2Dec
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Txt2Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgHandle
</UL>

<P><STRONG><a name="[28]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[16c]"></a>btod_internal_mul</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[16f]"></a>btod_internal_div</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[171]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[59]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[166]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[168]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
